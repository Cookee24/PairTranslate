name: üöÄ Publish Extension to Stores

on:
  push:
    branches: [main, master]
    paths: ["package.json"]

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      is_rc: ${{ steps.get_version.outputs.is_rc }}
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: üìã Check for version change
        id: check_version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r .version)

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            VERSION_CHANGED=1
            echo "‚úÖ Version changed: $PREVIOUS_VERSION -> $CURRENT_VERSION"
          else
            VERSION_CHANGED=0
            echo "‚è≠Ô∏è Version unchanged: $CURRENT_VERSION"
          fi

          echo "version_changed=$VERSION_CHANGED" >> "$GITHUB_OUTPUT"

      - name: üîç Get version
        if: steps.check_version.outputs.version_changed == '1'
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Check if version is RC
          if [[ "$VERSION" =~ -rc ]]; then
            echo "is_rc=1" >> "$GITHUB_OUTPUT"
            echo "üîñ RC version detected: $VERSION"
          else
            echo "is_rc=0" >> "$GITHUB_OUTPUT"
            echo "üì¶ Stable version detected: $VERSION"
          fi

      - name: üè∑Ô∏è Create and push tag
        if: steps.check_version.outputs.version_changed == '1'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

  publish:
    needs: version
    if: needs.version.outputs.version_changed == '1'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v5
        with:
          lfs: true
          ref: v${{ needs.version.outputs.version }}

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "22"

      - name: üõ†Ô∏è Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build Extension
        run: bun run build

      - name: üíæ Create Store Zips
        run: |
          bun run zip
          bun run zip:firefox

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: Release v${{ needs.version.outputs.version }}
          files: .output/*.zip
          draft: false
          prerelease: ${{ needs.version.outputs.is_rc == '1' }}

      - name: ‚¨ÜÔ∏è Submit to All Stores (Chrome, Firefox, Edge)
        if: needs.version.outputs.is_rc != '1'
        run: bunx wxt submit \
          --chrome-zip .output/*-chrome.zip \
          --firefox-zip .output/*-firefox.zip \
          --firefox-sources-zip .output/*-sources.zip \
          --edge-zip .output/*-chrome.zip

        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}

          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}
          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}

          EDGE_PRODUCT_ID: ${{ secrets.EDGE_PRODUCT_ID }}
          EDGE_CLIENT_ID: ${{ secrets.EDGE_CLIENT_ID }}
          EDGE_CLIENT_SECRET: ${{ secrets.EDGE_CLIENT_SECRET }}
          EDGE_ACCESS_TOKEN: ${{ secrets.EDGE_ACCESS_TOKEN }}
